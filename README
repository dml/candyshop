== Welcome to Rails and OOP

=== Problem

Нагромаждение контроллеров и моделей бизнес логикой.
Сложность рефакторинга.
Сложность поддержки и модификации бизнес логики.
Сложность покрытия тестами.

=== Benefit

Выделение бизнес логики в отдельный слой.
Очистка MVC от лишнего кода.
Покрытие стратегий тестами.
Возможность создавать mixin для некоторых стратегий.
Договоренность использовать стратегии как готовые сущности.
Описание сущностей и процессов существительными и глаголами.


=== Use case

Сервис предоставляющий услуги.
Сетка цен и сетка услуг.
Задача выполнить перечень услуг по отношению к покупателю и снять сумму денег со счета покупателя.


                                      free  $5    $10   $15
регистрация на конференции            +     +     +     +
бесплатные чай, кофе, бутерброды            +     +     +
базовые знания                        +     +     +     +
расширенные знания                          +     +     +
общение с ведущими разработчиками                 +     +
мастер класс                                            +



=== Implementation

Использование фасадов для сокрытия сабсистемы под интерфейсом одного объекта.

Вся бизнес логика сокрыта за единым фасадом CandyShop::Facade
Его использование сводится передаче сообщения (метода), указанию названия подсистемы и передачи всех параметров

Пример:
  CandyShop::Facade.get('Participation', params)
  CandyShop::Facade.create("Payment", params)

Результатом вызова через основной фасад всегда должен быть объект, через который производится преставление, либо роутинг.

Каждая подсистема имеет свой стек ошибок.
Контроллер приложения обрабатывает только одно-два исключения, в зависимости от направления редиректа либо представления полученного объекта.

Каждая подсистема проекта сокрыта за собственным фасадом, что позволяет сгрупировать логику по функциональному назначению.

Пример:
  CandyShop::Facades::PaymentFacade - фасад модуля по обработки платежных операций.
                                      Внутни объявляет исключение CandyShop::Facades::PaymentFacade::PaymentError

Таким образом контроллер ParticipationsController, который производит операцию оплаты (в данном случае, создание программы участия) реагирует на единственное исключение, в результате которого отображает начальную форму с сообщением об ошибке. В случае успеха, отображается сущность созданной программы (список пунктов Facilities пока не создается)

CandyShop::Facades::PaymentFacade содержит единственный Factory Method для определения объекта и передачи ему сообщениями с параметрами запроса. В данном примере, в зависимости от параметра запроса определятся стратегия и параметры обработки платежа. Подклассы Plans являются Value Objects, содержат настройки и сценарий обработки платежа.

Не реализовано до конца: По сценарию обработки составляется цепочка событй и обрабатывается в последовательности. Цепочка в данном случае удобна еще тем, что ее можно обратать в обратной последовательности, реализовав таким обрабом откат транзакции.

Пример по-проще:
  CandyShop::Facades::ParticipationFacade - фасад для работы с сущночями программы конференции.

Фасад скрывает единственное событие, которое выдает один объект
  Participation.find(params[:id])

Сокрытие поиска объекта удобно тем, что в последствии добавления авторизации, можно сделать поиск по ассоциации.
Можно добавить дополнительные фильтры.
Каждый метод фасада подсистемы покрывается тестами. Такие тесты являются интеграционными.



TODO: 
 заменить                  CandyShop::Facade.create("Payment", params)
 на вызов цепочки методов  CandyShop::Facade.use(:payment_facade).create(params)


=== Convention

Единый фасад для работы приложения (CandyShop::Facade).
Бизнес логика должна быть полностью сокрыта за фасадом приложения.
Бизнес логика разбита на подсистемы (lib/candy_shop/{subsystem}/..).
Собственный фасад подсистемы, обрабатывающий все исключения подсистемы (lib/candy_shop/facades/subsystem_facade.rb).
Контроллер приложения обрабатывает только высокоуровневые исключения.
При обращении к фасаду подсистемы возвращается либо сущность, либо исключение.
Модели содержат только декларации о структуре, зависимостях и валидации.
Разработка подсистемы начинается с написание собтственного фасада и интеграционных тестов.



== TODO
 - допилить конвеншон
 - написать в бложик
